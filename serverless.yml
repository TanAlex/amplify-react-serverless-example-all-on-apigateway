# serverless.yml

service: amplify-react-sls-app

plugins:
  # - serverless-python-requirements
  # - serverless-wsgi
  - aws-amplify-serverless-plugin
  - serverless-apigw-binary
  - serverless-plugin-reducer

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 512
  timeout: 10
  stage: ${self:custom.stage}
  region: us-west-2

custom:
  stage: ${opt:stage, "dev"}
  # wsgi:
  #   app: app.app
  #   packRequirements: false
  # pythonRequirements:
  #   dockerizePip: non-linux
  amplify:
      # this can be anything, as long as the frontend project includes it
    - filename: src/aws-exports.js
      type: javascript
      # this is the Cognito user pool app client (from the resources section)
      appClient: CognitoUserPoolClient
  apigwBinary:
    types:
      - '*/*'

package:
  individually: true
  exclude:
    # - node_modules/**
    - amplify/**
    - public/**
    - src/**
    - yarn.lock

# provider:
#   name: aws
#   runtime: python3.6
#   stage: ${self:custom.stage}
#   region: us-east-2

# functions:
#   app:
#     handler: wsgi_handler.handler
#     events:
#       - http:
#          path: /test
#          method: any
#          cors: true
#          authorizer: aws_iam

functions:
  expressapp:
    handler: lambda.express
    events:
      - http: 
          method: ANY 
          path: /api/{proxy+}
          cors: true
          # integration: lambda  # note: not use lambda, default is lambda_proxy, that works
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
          authorizer: aws_iam
      - http:
          method: ANY 
          path: /{proxy+}
          cors: true
          # authorizer: aws_iam
      - http:
          method: ANY 
          path: /
          cors: true
          # authorizer: aws_iam
    package:
      include:
        - build/**
resources:
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/api-gateway-errors.yml)}